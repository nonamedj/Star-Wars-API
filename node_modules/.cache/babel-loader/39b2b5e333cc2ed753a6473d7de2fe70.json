{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\src\\\\components\\\\Films.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, Grid, GridColumn, CardContent, CardHeader, CardDescription } from \"semantic-ui-react\";\n\nfunction Films() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        films = _useState2[0],\n        setFilms = _useState2[1];\n\n  useEffect(() => {\n    var url = \"https://swapi.dev/api/films\";\n\n    function fetchFilms() {\n      return _fetchFilms.apply(this, arguments);\n    }\n\n    function _fetchFilms() {\n      _fetchFilms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(url);\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              setFilms(data.results);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _fetchFilms.apply(this, arguments);\n    }\n\n    fetchFilms();\n  }, []);\n  const person = \"Luke Skywalker\";\n  let number = 1;\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        searchResult = _useState4[0],\n        setSearchResult = _useState4[1];\n\n  useEffect(() => {\n    var url = \"https://swapi.dev/api/people/\" + number;\n\n    function fetchAll() {\n      return _fetchAll.apply(this, arguments);\n    }\n\n    function _fetchAll() {\n      _fetchAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var res, allData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(url);\n\n            case 2:\n              res = _context2.sent;\n              _context2.next = 5;\n              return res.json();\n\n            case 5:\n              allData = _context2.sent;\n              setSearchResult(allData.results);\n\n              if (allData.name === person) {\n                console.log(allData.gender);\n              }\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return _fetchAll.apply(this, arguments);\n    }\n\n    fetchAll();\n  }, []);\n\n  function find() {\n    alert(\"helo\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Films\"), /*#__PURE__*/React.createElement(Grid, {\n    columns: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, films.map((films, i) => {\n    return /*#__PURE__*/React.createElement(GridColumn, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"Episode: \", films.episode_id), /*#__PURE__*/React.createElement(CardDescription, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 23\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 23\n      }\n    }, films.title)))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Searhing\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"search-input\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"findButton\",\n    onClick: find,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Find\")));\n}\n\nexport default Films;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/first-app/src/components/Films.jsx"],"names":["React","useState","useEffect","Card","Grid","GridColumn","CardContent","CardHeader","CardDescription","Films","films","setFilms","url","fetchFilms","fetch","res","json","data","results","person","number","searchResult","setSearchResult","fetchAll","allData","name","console","log","gender","find","alert","map","i","episode_id","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  Grid,\r\n  GridColumn,\r\n  CardContent,\r\n  CardHeader,\r\n  CardDescription,\r\n} from \"semantic-ui-react\";\r\n\r\nfunction Films() {\r\n  const [films, setFilms] = useState([]);\r\n  useEffect(() => {\r\n    var url = \"https://swapi.dev/api/films\";\r\n    async function fetchFilms() {\r\n      let res = await fetch(url);\r\n      let data = await res.json();\r\n      setFilms(data.results);\r\n    }\r\n    fetchFilms();\r\n  }, []);\r\n\r\n  const person = \"Luke Skywalker\";\r\n  let number = 1;\r\n\r\n  const [searchResult, setSearchResult] = useState([]);\r\n    useEffect(() => {\r\n    \r\n      var url = \"https://swapi.dev/api/people/\" + number;\r\n      async function fetchAll() {\r\n        let res = await fetch(url);\r\n        let allData = await res.json();\r\n        setSearchResult(allData.results);\r\n\r\n        if(allData.name === person) {\r\n            console.log(allData.gender)\r\n        }\r\n      }\r\n      fetchAll();\r\n    }, []);\r\n  function find() {\r\n    alert(\"helo\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Films</h1>\r\n      {\r\n        <Grid columns={3}>\r\n          {films.map((films, i) => {\r\n            return (\r\n              <GridColumn key={i}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <CardHeader>Episode: {films.episode_id}</CardHeader>\r\n                    <CardDescription>\r\n                      <strong>Title</strong>\r\n                      <p>{films.title}</p>\r\n                    </CardDescription>\r\n                  </CardContent>\r\n                </Card>\r\n              </GridColumn>\r\n            );\r\n          })}\r\n        </Grid>\r\n      }\r\n      <div className=\"search-div\">\r\n        <h1>Searhing</h1>\r\n        <input className=\"search-input\" type=\"text\" />\r\n        <button id=\"findButton\" onClick={find}>\r\n          Find\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Films;\r\n"]},"metadata":{},"sourceType":"module"}