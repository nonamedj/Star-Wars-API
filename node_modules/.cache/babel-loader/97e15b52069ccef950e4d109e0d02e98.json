{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\first-app\\\\src\\\\components\\\\Films.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Card, Grid, GridColumn, CardContent, CardHeader, CardDescription } from \"semantic-ui-react\";\n\nfunction Films() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        films = _useState2[0],\n        setFilms = _useState2[1];\n\n  useEffect(() => {\n    var url = \"https://swapi.dev/api/films\";\n\n    function fetchFilms() {\n      return _fetchFilms.apply(this, arguments);\n    }\n\n    function _fetchFilms() {\n      _fetchFilms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(url);\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              setFilms(data.results);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _fetchFilms.apply(this, arguments);\n    }\n\n    fetchFilms();\n  }, []);\n  /*  var allPeople;\r\n  \n   function getAllStarwarsPeople() {\r\n     let people = [];\r\n     return axios(\"https://swapi.dev/api/people/\")\r\n       .then((response) => {\r\n         people = response.data.results;\r\n         return response.data.count;\r\n       })\r\n       .then((count) => {\r\n         const numberOfPagesLeft = Math.ceil((count - 1) / 10);\r\n         let promises = [];\r\n         for (let i = 2; i <= numberOfPagesLeft; i++) {\r\n           promises.push(axios(`https://swapi.dev/api/people?page=${i}`));\r\n         }\r\n         return Promise.all(promises);\r\n       })\r\n       .then((response) => {\r\n         people = response.reduce(\r\n           (acc, data) => [...acc, ...data.data.results],\r\n           people\r\n         );\r\n         return people;\r\n       })\r\n       .catch((error) => console.log(\"Error catching people\"));\r\n   }\r\n  \n   (async () => {\r\n     const starwarsPeople = await getAllStarwarsPeople();\r\n     for (let i = 0; i < starwarsPeople.length; i++) {\r\n       //console.log(starwarsPeople[i].name);\r\n     }\r\n     allPeople = starwarsPeople;\r\n   })(); */\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        input = _useState4[0],\n        setInput = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        searchResult = _useState6[0],\n        setSearchResult = _useState6[1];\n\n  function handleChange(event) {\n    setInput(event.target.value);\n  }\n\n  function find() {\n    /*  const result = allPeople.filter(e => e.name === match);\r\n     setMatchResult(result[0]); */\n    axios(\"https://swapi.dev/api/people/?search=\" + input).then(res => {});\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Films\"), /*#__PURE__*/React.createElement(Grid, {\n    columns: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, films.map((films, i) => {\n    return /*#__PURE__*/React.createElement(GridColumn, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Episode: \", films.episode_id), /*#__PURE__*/React.createElement(CardDescription, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 23\n      }\n    }, films.title)))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"Searhing\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"search-input\",\n    onChange: handleChange,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"findButton\",\n    onClick: find,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Find\")), matchResult != \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-result-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Name: \", matchResult.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Gender: \", matchResult.gender), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Height: \", matchResult.height)) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default Films;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/first-app/src/components/Films.jsx"],"names":["React","useState","useEffect","axios","Card","Grid","GridColumn","CardContent","CardHeader","CardDescription","Films","films","setFilms","url","fetchFilms","fetch","res","json","data","results","input","setInput","searchResult","setSearchResult","handleChange","event","target","value","find","then","map","i","episode_id","title","matchResult","name","gender","height"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,UALF,EAMEC,eANF,QAOO,mBAPP;;AAUA,SAASC,KAAT,GAAiB;AAAA,oBACWT,QAAQ,CAAC,EAAD,CADnB;AAAA;AAAA,QACRU,KADQ;AAAA,QACDC,QADC;;AAEfV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,GAAG,GAAG,6BAAV;;AADc,aAECC,UAFD;AAAA;AAAA;;AAAA;AAAA,6EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACkBC,KAAK,CAACF,GAAD,CADvB;;AAAA;AACMG,cAAAA,GADN;AAAA;AAAA,qBAEmBA,GAAG,CAACC,IAAJ,EAFnB;;AAAA;AAEMC,cAAAA,IAFN;AAGEN,cAAAA,QAAQ,CAACM,IAAI,CAACC,OAAN,CAAR;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA,OAFc;AAAA;AAAA;;AAOdL,IAAAA,UAAU;AACX,GARQ,EAQN,EARM,CAAT;AAUD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZgB,qBAgDWb,QAAQ,CAAC,EAAD,CAhDnB;AAAA;AAAA,QAgDRmB,KAhDQ;AAAA,QAgDDC,QAhDC;;AAAA,qBAiDyBpB,QAAQ,CAAC,EAAD,CAjDjC;AAAA;AAAA,QAiDRqB,YAjDQ;AAAA,QAiDMC,eAjDN;;AAmDf,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BJ,IAAAA,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD;;AACD,WAASC,IAAT,GAAgB;AACf;;AAECzB,IAAAA,KAAK,CAAC,0CAA0CiB,KAA3C,CAAL,CAAuDS,IAAvD,CAA4Db,GAAG,IAAI,CAElE,CAFD;AAGD;;AAED,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAGI,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,KAAK,CAACmB,GAAN,CAAU,CAACnB,KAAD,EAAQoB,CAAR,KAAc;AACvB,wBACE,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsBpB,KAAK,CAACqB,UAA5B,CADF,eAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIrB,KAAK,CAACsB,KAAV,CAFF,CAFF,CADF,CADF,CADF;AAaD,GAdA,CADH,CAHJ,eAqBE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEE;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,QAAQ,EAAET,YAA1C;AAAwD,IAAA,IAAI,EAAC,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,EAAE,EAAC,YAAX;AAAwB,IAAA,OAAO,EAAEI,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,CArBF,EA6BIM,WAAW,IAAI,EAAf,gBAEA;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWA,WAAW,CAACC,IAAvB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYD,WAAW,CAACE,MAAxB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYF,WAAW,CAACG,MAAxB,CAHF,CAFA,gBAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CArCJ,CADF;AAgDD;;AACD,eAAe3B,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Card,\r\n  Grid,\r\n  GridColumn,\r\n  CardContent,\r\n  CardHeader,\r\n  CardDescription,\r\n} from \"semantic-ui-react\"; \r\n\r\n\r\nfunction Films() {\r\n  const [films, setFilms] = useState([]);\r\n  useEffect(() => {\r\n    var url = \"https://swapi.dev/api/films\";\r\n    async function fetchFilms() {\r\n      let res = await fetch(url);\r\n      let data = await res.json();\r\n      setFilms(data.results);\r\n    }\r\n    fetchFilms();\r\n  }, []);\r\n\r\n /*  var allPeople;\r\n\r\n  function getAllStarwarsPeople() {\r\n    let people = [];\r\n    return axios(\"https://swapi.dev/api/people/\")\r\n      .then((response) => {\r\n        people = response.data.results;\r\n        return response.data.count;\r\n      })\r\n      .then((count) => {\r\n        const numberOfPagesLeft = Math.ceil((count - 1) / 10);\r\n        let promises = [];\r\n        for (let i = 2; i <= numberOfPagesLeft; i++) {\r\n          promises.push(axios(`https://swapi.dev/api/people?page=${i}`));\r\n        }\r\n        return Promise.all(promises);\r\n      })\r\n      .then((response) => {\r\n        people = response.reduce(\r\n          (acc, data) => [...acc, ...data.data.results],\r\n          people\r\n        );\r\n        return people;\r\n      })\r\n      .catch((error) => console.log(\"Error catching people\"));\r\n  }\r\n\r\n  (async () => {\r\n    const starwarsPeople = await getAllStarwarsPeople();\r\n    for (let i = 0; i < starwarsPeople.length; i++) {\r\n      //console.log(starwarsPeople[i].name);\r\n    }\r\n    allPeople = starwarsPeople;\r\n  })(); */\r\n\r\n \r\n  const [input, setInput] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n\r\n  function handleChange(event) {\r\n    setInput(event.target.value);\r\n  }\r\n  function find() {\r\n   /*  const result = allPeople.filter(e => e.name === match);\r\n    setMatchResult(result[0]); */\r\n    axios(\"https://swapi.dev/api/people/?search=\" + input).then(res => {\r\n      \r\n    } )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Films</h1>\r\n      {\r\n        <Grid columns={3}>\r\n          {films.map((films, i) => {\r\n            return (\r\n              <GridColumn key={i}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <CardHeader>Episode: {films.episode_id}</CardHeader>\r\n                    <CardDescription>\r\n                      <strong>Title</strong>\r\n                      <p>{films.title}</p>\r\n                    </CardDescription>\r\n                  </CardContent>\r\n                </Card>\r\n              </GridColumn>\r\n            );\r\n          })}\r\n        </Grid>\r\n      }\r\n      <div className=\"search-div\">\r\n      <h1>Searhing</h1>\r\n        <input className=\"search-input\" onChange={handleChange} type=\"text\" />\r\n        <button id=\"findButton\" onClick={find}>\r\n          Find\r\n        </button>\r\n      </div>\r\n      {\r\n        matchResult != \"\"\r\n        ? \r\n        <div className=\"search-result-div\">\r\n          <h1>Name: {matchResult.name}</h1>\r\n          <p>Gender: {matchResult.gender}</p>\r\n          <p>Height: {matchResult.height}</p>\r\n        </div>\r\n        :\r\n        <div>\r\n          <h1></h1>\r\n          <p></p>\r\n          <p></p>\r\n        </div>\r\n        \r\n      }\r\n     \r\n    </>\r\n  );\r\n}\r\nexport default Films;\r\n"]},"metadata":{},"sourceType":"module"}